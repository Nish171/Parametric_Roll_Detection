def ARModel_Inference(x, y, OUT_dim = pred_dim*4, model=model):
    inp1 = x
    true_roll = y[:,:,0]
    pred_roll = []
    for i in range(OUT_dim):
        wave = y[:,i:i+1,-1:]
        INPUT = (inp1, wave[:,:,0])
        OUT = model(INPUT)
        roll = tf.cast(OUT, tf.float64)
        HnP = y[:,i:i+1,1:3]
        temp = tf.concat([roll, HnP, wave], axis = -1)
        inp1 = tf.concat([inp1[:,1:,:], temp], axis=1)
        pred_roll.append(roll)

    pred_roll = tf.squeeze(tf.stack(pred_roll, axis=1), [-1]) 
    return true_roll, pred_roll


def save_inference(Data_inf, model=model, OUT_dim = pred_dim*4, save_dir=None):
    true_roll = []
    pred_roll = []
    inputs = []
    for x, y in Data_inf:
        t_r, p_r = ARModel_Inference(x, y, OUT_dim = OUT_dim, model=model)
        pred_roll.extend(p_r)
        true_roll.extend(t_r)
        inputs.extend(x)
        
    inputs = np.array(inputs)
    true_roll = np.array(true_roll)
    pred_roll = np.array(pred_roll)
    
    if save_dir is not None:
        if not os.path.isdir(save_dir):
            os.mkdir(save_dir)
        inp_path = save_dir + '/inputs.csv'
        true_path = save_dir + '/true_roll.csv'
        pred_path = save_dir + '/pred_roll.csv'
        
        np.savetxt(inp_path, inputs[:,:,0], delimiter =", ")
        np.savetxt(true_path, true_roll, delimiter =", ")
        np.savetxt(pred_path, pred_roll[:,:,0], delimiter =", ")
        
        
    return inputs, true_roll, pred_roll
    


val_dir = 'models/LSTM_encdec/03/Val'
test_dir = 'models/LSTM_encdec/03/Test'


test_in, test_true, test_pred = save_inference(Data_inf.Test, save_dir=test_dir)
val_in, val_true, val_pred = save_inference(Data_inf.Val, save_dir=val_dir)